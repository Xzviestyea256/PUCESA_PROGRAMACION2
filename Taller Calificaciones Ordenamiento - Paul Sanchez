print("----------")
print("Nombre: Paul Sanchez")
print("Fecha: 2 de junio, 2025")
print("Tema: Bisect y Sorted")
print("Taller Práctico: Visualización y Gestión de Calificaciones")
print("----------\n")

#Paso 1
import bisect
import random
import time
import matplotlib.pyplot as plt
from tqdm import tqdm
from IPython.display import clear_output
import time as t
notas = random.sample(range(0, 21),15)
print("Notas originales:", notas)

#Paso 2
def bubble_sort_viz(lista, mostrar_pasos=False, pausa=0.3):
    lista = lista.copy()

    comparaciones = 0
    intercambios = 0

    n = len(lista)

    pasos = []

    for i in range(n):
        for j in range(0, n - i - 1):
            comparaciones += 1

            if lista[j] > lista[j + 1]:
                lista[j], lista[j + 1] = lista[j + 1], lista[j]
                intercambios += 1
                pasos.append(lista.copy())

    return lista, comparaciones, intercambios, pasos

def animar_bubble_sort(pasos):
    for estado in pasos:
        clear_output(wait=True)

        plt.bar(range(len(estado)), estado, color='skyblue')

        plt.title("Animación Bubble Sort")
        plt.xlabel("Índice") 
        plt.ylabel("Valor")  

        plt.pause(0.3)
        
        
    plt.figure(figsize=(8, 4))
    plt.bar(range(len(pasos[-1])), pasos[-1], color='skyblue')
    plt.title("Bubble Sort - Resultado Final")
    plt.xlabel("Índice")
    plt.ylabel("Valor")
    plt.show()

_, _, _, pasos_animacion = bubble_sort_viz(notas, mostrar_pasos=True)

animar_bubble_sort(pasos_animacion)

#Paso 3
def animar_sorted_simulada(lista_original, pausa=0.2):

    lista_sorted_final = sorted(lista_original)

    pasos_sorted = []

    lista_simulada = lista_original.copy()
    for i in range(len(lista_sorted_final)):
        if lista_simulada[i] != lista_sorted_final[i]:
            lista_simulada[i] = lista_sorted_final[i]
        pasos_sorted.append(lista_simulada.copy())

    total_pasos = len(pasos_sorted)

    for k in range(total_pasos):
        clear_output(wait=True)  

        fig, axs = plt.subplots(1, 2, figsize=(12, 4))

        if k < len(pasos_sorted):
            axs[1].bar(range(len(pasos_sorted[k])), pasos_sorted[k], color='lightgreen')
            axs[1].set_title(f"sorted() - Paso {k+1}")
            axs[1].set_ylim(0, max(lista_original) + 5)
        else:
            axs[1].bar(range(len(lista_sorted_final)), lista_sorted_final, color='lightgreen')
            axs[1].set_title("sorted() - Final")

        plt.tight_layout()
        plt.pause(pausa)

    plt.show()

animar_sorted_simulada(notas)

#Paso 4
nueva_nota = 15
bisect.insort(notas, nueva_nota)
print("Lista despues de la nueva nota:", notas)

#Paso 5
nota_buscar = 10  # puedes cambiar o pedir por input
posicion = bisect.bisect_left(notas, nota_buscar)
if posicion < len(notas) and notas[posicion] == nota_buscar:
    print(f"La nota {nota_buscar} se encuentra en la posición {posicion}")
else:
    print(f"La nota {nota_buscar} no está en la lista.")